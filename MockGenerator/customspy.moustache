{{#initializer}}
    {{{declarationText}}} {
    {{{initializerCall}}}
    }
{{/initializer}}

{{#property}}

    {{#hasSetter}}
        {{scope}} var {{uniqueName}}SetterCalled = false
        {{scope}} var {{uniqueName}}: {{{optionalType}}}
    {{/hasSetter}}
    {{scope}} var {{uniqueName}}GetterCalled = false
    {{scope}} var {{uniqueName}}Mock: {{{iuoType}}} {{{defaultValueAssignment}}}

    {{{declarationText}}} {

    {{#hasSetter}}
        set {
        {{uniqueName}}SetterCalled = true
        {{uniqueName}} = newValue
        }
        get {
        {{uniqueName}}GetterCalled = true
        return {{uniqueName}}Mock
        }
    {{/hasSetter}}
    {{^hasSetter}}
        {{uniqueName}}GetterCalled = true
        return {{uniqueName}}Mock
    {{/hasSetter}}

    }
{{/property}}

{{#subscript}}

    {{scope}} var {{uniqueName}}GetterCalled = false
    {{#escapingParameters}}
        {{scope}} var {{uniqueName}}GetterParameters: {{{tupleRepresentation}}}?
    {{/escapingParameters}}
    {{scope}} var {{uniqueName}}Result: {{{resultType.iuoType}}} {{{resultType.defaultValueAssignment}}}

    {{#hasSetter}}
        {{scope}} var {{uniqueName}}SetterCalled = false
        {{#escapingParameters}}
            {{scope}} var {{uniqueName}}SetterParameters: {{{tupleRepresentation}}}?
        {{/escapingParameters}}
        {{scope}} var {{uniqueName}}: {{{resultType.type}}}?
    {{/hasSetter}}

    {{{declarationText}}} {

    {{#hasSetter}}
        set {
        {{uniqueName}}SetterCalled = true
        {{#escapingParameters}}
            {{uniqueName}}SetterParameters = {{{tupleAssignment}}}
        {{/escapingParameters}}
        {{uniqueName}} = newValue
        }
        get {
        {{uniqueName}}GetterCalled = true
        {{#escapingParameters}}
            {{uniqueName}}GetterParameters = {{{tupleAssignment}}}
        {{/escapingParameters}}
        return {{uniqueName}}Result
        }
    {{/hasSetter}}
    {{^hasSetter}}
        {{uniqueName}}GetterCalled = true
        {{#escapingParameters}}
            {{uniqueName}}GetterParameters = {{{tupleAssignment}}}
        {{/escapingParameters}}
        return {{uniqueName}}Result
    {{/hasSetter}}
    }

{{/subscript}}

{{#method}}

    {{scope}} var {{uniqueName}}Called = false

    {{#escapingParameters}}
        {{scope}} var {{uniqueName}}Parameters: {{{tupleRepresentation}}}?
    {{/escapingParameters}}

    {{#closureParameter}}
        {{#hasArguments}}
            {{scope}} var {{uniqueName}}{{capitalizedName}}Result: {{{argumentsTupleRepresentation}}}?
        {{/hasArguments}}
        {{^hasArguments}}
            {{scope}} var shouldCall{{capitalizedUniqueName}}{{capitalizedName}} = false
        {{/hasArguments}}
    {{/closureParameter}}

    {{#throws}}
        {{scope}} var {{uniqueName}}Error: Error?
    {{/throws}}

    {{#resultType}}
        {{scope}} var {{uniqueName}}Result: {{{iuoType}}} {{{defaultValueAssignment}}}
    {{/resultType}}

    {{{declarationText}}} {

    {{uniqueName}}Called = true

    {{#escapingParameters}}
        {{uniqueName}}Parameters = {{{tupleAssignment}}}
    {{/escapingParameters}}

    {{#closureParameter}}
        {{#hasArguments}}
            if let result = {{uniqueName}}{{capitalizedName}}Result {
            {{{implicitClosureCall}}}
            }
        {{/hasArguments}}
        {{^hasArguments}}
            if shouldCall{{capitalizedUniqueName}}{{capitalizedName}} {
            {{{implicitClosureCall}}}
            }
        {{/hasArguments}}
    {{/closureParameter}}

    {{#throws}}
        if let error = {{uniqueName}}Error {
        throw error
        }
    {{/throws}}

    {{#resultType}}
        return {{uniqueName}}Result{{returnCastStatement}}
    {{/resultType}}

    }
{{/method}}
